Index: src/sample/Controller.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/sample/Controller.java b/src/sample/Controller.java
--- a/src/sample/Controller.java	(revision 5b07f66c95511a9065a2ba522bbbde44e315d5c3)
+++ b/src/sample/Controller.java	(date 1650902745046)
@@ -150,7 +150,6 @@
                     @Override
                     public void handle(MouseEvent event) {
                         System.out.println(event.getSource());
-                        //event.consume(); //stops any further handling of the event
                     }
                 });
             }
@@ -267,7 +266,6 @@
         timeline.play();
     }
 
-
     private void SaveFile(String content, File file){
         try {
             FileWriter fileWriter = null;
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 5b07f66c95511a9065a2ba522bbbde44e315d5c3)
+++ b/.idea/workspace.xml	(date 1651044258055)
@@ -2,9 +2,9 @@
 <project version="4">
   <component name="ChangeListManager">
     <list default="true" id="cdb932d9-7e58-4d94-93a9-e7b232ef17da" name="Default" comment="add station to vector">
+      <change afterPath="$PROJECT_DIR$/src/sample/openMPStationPressed.txt" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/production/JavaCodeNote/sample/Controller$1.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/JavaCodeNote/sample/Controller$1.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/production/JavaCodeNote/sample/Controller$2.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/JavaCodeNote/sample/Controller$2.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/JavaCodeNote/sample/Controller$2.class" beforeDir="false" />
       <change beforePath="$PROJECT_DIR$/out/production/JavaCodeNote/sample/Controller.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/JavaCodeNote/sample/Controller.class" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/sample/Controller.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/sample/Controller.java" afterDir="false" />
     </list>
@@ -73,8 +73,8 @@
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
   </component>
   <component name="HighlightingSettingsPerFile">
-    <setting file="file://$PROJECT_DIR$/src/sample/Main.java" root0="FORCE_HIGHLIGHTING" />
     <setting file="file://$PROJECT_DIR$/src/sample/Controller.java" root0="FORCE_HIGHLIGHTING" />
+    <setting file="file://$PROJECT_DIR$/src/sample/Main.java" root0="FORCE_HIGHLIGHTING" />
   </component>
   <component name="IdeDocumentHistory">
     <option name="changedFiles">
@@ -180,27 +180,9 @@
         <option name="Make" enabled="true" />
       </method>
     </configuration>
-    <configuration default="true" type="TestNG">
-      <option name="TEST_OBJECT" value="CLASS" />
-      <option name="WORKING_DIRECTORY" value="%MODULE_WORKING_DIR%" />
-      <properties />
-      <listeners />
-      <method v="2">
-        <option name="Make" enabled="true" />
-      </method>
-    </configuration>
     <configuration name="&lt;template&gt;" type="WebApp" default="true" selected="false">
       <Host>localhost</Host>
       <Port>5050</Port>
-    </configuration>
-    <configuration default="true" type="#org.jetbrains.idea.devkit.run.PluginConfigurationType">
-      <module name="" />
-      <option name="VM_PARAMETERS" value="-Xmx512m -Xms256m -XX:MaxPermSize=250m" />
-      <option name="PROGRAM_PARAMETERS" />
-      <predefined_log_file enabled="true" id="idea.log" />
-      <method v="2">
-        <option name="Make" enabled="true" />
-      </method>
     </configuration>
     <configuration name="Main" type="Application" factoryName="Application">
       <option name="MAIN_CLASS_NAME" value="sample.Main" />
@@ -248,6 +230,24 @@
         <option name="Make" enabled="true" />
       </method>
     </configuration>
+    <configuration default="true" type="TestNG">
+      <option name="TEST_OBJECT" value="CLASS" />
+      <option name="WORKING_DIRECTORY" value="%MODULE_WORKING_DIR%" />
+      <properties />
+      <listeners />
+      <method v="2">
+        <option name="Make" enabled="true" />
+      </method>
+    </configuration>
+    <configuration default="true" type="#org.jetbrains.idea.devkit.run.PluginConfigurationType">
+      <module name="" />
+      <option name="VM_PARAMETERS" value="-Xmx512m -Xms256m -XX:MaxPermSize=250m" />
+      <option name="PROGRAM_PARAMETERS" />
+      <predefined_log_file enabled="true" id="idea.log" />
+      <method v="2">
+        <option name="Make" enabled="true" />
+      </method>
+    </configuration>
   </component>
   <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
   <component name="TaskManager">
@@ -494,7 +494,6 @@
         </entry>
       </map>
     </option>
-    <option name="oldMeFiltersMigrated" value="true" />
   </component>
   <component name="VcsManagerConfiguration">
     <option name="OFFER_MOVE_TO_ANOTHER_CHANGELIST_ON_PARTIAL_COMMIT" value="true" />
Index: src/sample/openMPStationPressed.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/sample/openMPStationPressed.txt b/src/sample/openMPStationPressed.txt
new file mode 100644
--- /dev/null	(date 1650902603023)
+++ b/src/sample/openMPStationPressed.txt	(date 1650902603023)
@@ -0,0 +1,111 @@
+void openMPStationPressed(MouseEvent event) {
+
+//>>>>>>> a357716505aa1f64e9ecd132898aa970a13e7362
+
+        HTMLEditor htmlEditor = new HTMLEditor();
+        File openFile = new File("C:/Users/Public/Documents/JavaCodeNote/"+Main.stationName.get(index)+".html");
+        if(openFile != null){
+            String textRead = readFile(openFile);
+            htmlEditor.setHtmlText(textRead);
+        }
+        Parent terminalpage = FXMLLoader.load(getClass().getResource("terminalpage.fxml"));
+        Scene scene = new Scene(terminalpage);
+        Stage stage = new Stage();
+        stage.setScene(scene);
+        stage.show();
+        ToolBar toolBar = new ToolBar();
+        Button buttonReturn = new Button("Return");
+        Button buttonExport = new Button("Export");
+
+        buttonReturn.setOnAction(new EventHandler<ActionEvent>() {
+            @Override
+            public void handle(ActionEvent actionEvent) {
+
+                //save the current file, then return
+                File openFile = new File("C:/Users/Public/Documents/JavaCodeNote/"+Main.stationName.get(0)+".html");
+                openFile.delete();
+                if(openFile != null){
+                    String stringHtml = htmlEditor.getHtmlText();
+                    SaveFile(stringHtml, openFile);
+                }
+
+                toolBar.setVisible(false);
+                desktopBorderPane.setTop(desktopToolBar);
+                desktopToolBar.setVisible(true);
+                borderPane.getChildren().remove(root);
+                /*stage.close();
+                ((Stage) ((Node) event.getSource()).getScene().getWindow()).setFullScreen(true);*/
+            }
+        });
+        buttonExport.setOnAction(new EventHandler<ActionEvent>(){
+            @Override
+            public void handle(ActionEvent t) {
+                String stringHtml = htmlEditor.getHtmlText();
+                //htmlText.setText(stringHtml);
+
+                FileChooser fileChooser = new FileChooser();
+
+                //Set extension filter
+                FileChooser.ExtensionFilter extFilter = new FileChooser.ExtensionFilter("HTML files (*.html)", "*.html");
+                fileChooser.getExtensionFilters().add(extFilter);
+
+                //Show save file dialog
+                File file = fileChooser.showSaveDialog((Stage) ((Node) event.getSource()).getScene().getWindow());
+                if(file != null){
+                    SaveFile(stringHtml, file);
+                }
+            }
+        });
+
+        toolBar.getItems().add(buttonReturn);
+
+//<<<<<<< HEAD
+        toolBar.getItems().add(buttonExport);
+        //toolBar.setMinHeight(50);
+        //htmlEditor.setMinHeight(200);
+        htmlEditor.setMinWidth(desktop.getWidth());
+        //root = new VBox(toolBar, htmlEditor);
+        root = new VBox(htmlEditor);
+        //System.out.println(terminalpage.getChildrenUnmodifiable());
+        TerminalController.outside.setTop(toolBar);
+        toolBar.setVisible(true);
+
+
+        //Parent root = new HTMLEditor();
+        //Scene scene =algorithmStation.getScene();
+//=======
+        //Scene scene =algorithmStation.getScene();
+//>>>>>>> a357716505aa1f64e9ecd132898aa970a13e7362
+        root.translateYProperty().set(scene.getHeight());
+        TerminalController.outside.getChildren().add(root);
+        toolBar.setMinHeight(50);
+        toolBar.setMaxWidth(scene.getWidth());
+        htmlEditor.setMinHeight(scene.getHeight()-50);
+        //htmlEditor.setPrefHeight(scene.getHeight()-50);
+        Timeline timeline = new Timeline();
+        KeyValue kv = new KeyValue(root.translateYProperty(), 0, Interpolator.EASE_IN);
+        KeyFrame kf = new KeyFrame(Duration.seconds(1), kv);
+        timeline.getKeyFrames().add(kf);
+        timeline.setOnFinished(t -> {
+            //desktop.getChildren().remove(anchorRoot);
+            desktopToolBar.setVisible(false);
+        });
+        timeline.play();
+        /*Scene scene = new Scene(root);
+        root.translateYProperty().set(scene.getHeight());
+        StackPane parentContainer = (StackPane) ((Node) event.getSource()).getScene().getRoot();
+
+        parentContainer.getChildren().add(root);
+
+
+        Timeline timeline = new Timeline();
+        KeyValue kv = new KeyValue(parentContainer.translateYProperty(), 0, Interpolator.EASE_IN);
+        KeyFrame kf = new KeyFrame(Duration.seconds(1), kv);
+        timeline.getKeyFrames().add(kf);
+
+        timeline.play();*/
+        /*stage.setTitle("Take Notes");
+        stage.setScene(scene);
+        stage.setFullScreen(true);
+        stage.showAndWait();*/
+    }
\ No newline at end of file
